------- LLVM -------------------------------

define spir_kernel void @mmul2d(double*, double*, double*, i64) {
top:
  %res.i = call spir_func i64 @_Z15get_global_sizej(i32 0)
  %res.i.8 = call spir_func i64 @_Z13get_global_idj(i32 1)
  %res.i.9 = call spir_func i64 @_Z13get_global_idj(i32 0)
  %4 = icmp slt i64 %3, 1
  br i1 %4, label %L.7, label %L.preheader

L.preheader:                                      ; preds = %top
  %5 = mul i64 %res.i.8, %3
  %6 = add i64 %5, -1
  br label %L

L:                                                ; preds = %L, %L.preheader
  %c_ij.0 = phi double [ %17, %L ], [ 0.000000e+00, %L.preheader ]
  %"#s18.0" = phi i64 [ %7, %L ], [ 1, %L.preheader ]
  %7 = add i64 %"#s18.0", 1
  %8 = add i64 %"#s18.0", -1
  %9 = mul i64 %8, %res.i
  %10 = add i64 %9, %res.i.9
  %11 = getelementptr double, double* %0, i64 %10
  %12 = load double, double* %11, align 1
  %13 = add i64 %6, %"#s18.0"
  %14 = getelementptr double, double* %1, i64 %13
  %15 = load double, double* %14, align 1
  %16 = fmul double %12, %15
  %17 = fadd double %c_ij.0, %16
  %18 = icmp eq i64 %"#s18.0", %3
  br i1 %18, label %L.7.loopexit, label %L

L.7.loopexit:                                     ; preds = %L
  br label %L.7

L.7:                                              ; preds = %L.7.loopexit, %top
  %c_ij.1 = phi double [ 0.000000e+00, %top ], [ %17, %L.7.loopexit ]
  %19 = mul i64 %res.i.8, %res.i
  %20 = add i64 %19, %res.i.9
  %21 = getelementptr double, double* %2, i64 %20
  store double %c_ij.1, double* %21, align 1
  ret void
}
------- SPIR -------------------------------
; ModuleID = 'mmul2d'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define spir_kernel void @mmul2d(double addrspace(1)*, double addrspace(1)*, double addrspace(1)*, i64) {
top:
  %res.i = call spir_func i64 @_Z15get_global_sizej(i32 0)
  %res.i.8 = call spir_func i64 @_Z13get_global_idj(i32 1)
  %res.i.9 = call spir_func i64 @_Z13get_global_idj(i32 0)
  %4 = icmp slt i64 %3, 1
  br i1 %4, label %L.7, label %L.preheader

L.preheader:                                      ; preds = %top
  %5 = mul i64 %res.i.8, %3
  %6 = add i64 %5, -1
  br label %L

L:                                                ; preds = %L, %L.preheader
  %c_ij.0 = phi double [ %17, %L ], [ 0.000000e+00, %L.preheader ]
  %"#s18.0" = phi i64 [ %7, %L ], [ 1, %L.preheader ]
  %7 = add i64 %"#s18.0", 1
  %8 = add i64 %"#s18.0", -1
  %9 = mul i64 %8, %res.i
  %10 = add i64 %9, %res.i.9
  %11 = getelementptr double, double addrspace(1)* %0, i64 %10
  %12 = load double, double addrspace(1)* %11, align 1
  %13 = add i64 %6, %"#s18.0"
  %14 = getelementptr double, double addrspace(1)* %1, i64 %13
  %15 = load double, double addrspace(1)* %14, align 1
  %16 = fmul double %12, %15
  %17 = fadd double %c_ij.0, %16
  %18 = icmp eq i64 %"#s18.0", %3
  br i1 %18, label %L.7, label %L

L.7:                                              ; preds = %L, %top
  %c_ij.1 = phi double [ 0.000000e+00, %top ], [ %17, %L ]
  %19 = mul i64 %res.i.8, %res.i
  %20 = add i64 %19, %res.i.9
  %21 = getelementptr double, double addrspace(1)* %2, i64 %20
  store double %c_ij.1, double addrspace(1)* %21, align 1
  ret void
}

!llvm.module.flags = !{!0, !1}

!0 = !{i32 2, !"Dwarf Version", i32 2}
!1 = !{i32 1, !"Debug Info Version", i32 3}
------- HSA --------------------------------
; ModuleID = 'mmul2d'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define spir_kernel void @mmul2d(double addrspace(1)*, double addrspace(1)*, double addrspace(1)*, i64) {
top:
  %4 = call spir_func i32 @__hsail_get_global_size(i32 0) #0
  %5 = zext i32 %4 to i64
  %6 = call spir_func i32 @__hsail_get_global_id(i32 1) #0
  %7 = zext i32 %6 to i64
  %8 = call spir_func i32 @__hsail_get_global_id(i32 0) #0
  %9 = zext i32 %8 to i64
  %10 = icmp slt i64 %3, 1
  br i1 %10, label %L.7, label %L.preheader

L.preheader:                                      ; preds = %top
  %11 = mul i64 %7, %3
  %12 = add i64 %11, -1
  br label %L

L:                                                ; preds = %L, %L.preheader
  %c_ij.0 = phi double [ %23, %L ], [ 0.000000e+00, %L.preheader ]
  %"#s18.0" = phi i64 [ %13, %L ], [ 1, %L.preheader ]
  %13 = add i64 %"#s18.0", 1
  %14 = add i64 %"#s18.0", -1
  %15 = mul i64 %14, %5
  %16 = add i64 %15, %9
  %17 = getelementptr double, double addrspace(1)* %0, i64 %16
  %18 = load double, double addrspace(1)* %17, align 1
  %19 = add i64 %12, %"#s18.0"
  %20 = getelementptr double, double addrspace(1)* %1, i64 %19
  %21 = load double, double addrspace(1)* %20, align 1
  %22 = fmul double %18, %21
  %23 = fadd double %c_ij.0, %22
  %24 = icmp eq i64 %"#s18.0", %3
  br i1 %24, label %L.7, label %L

L.7:                                              ; preds = %L, %top
  %c_ij.1 = phi double [ 0.000000e+00, %top ], [ %23, %L ]
  %25 = mul i64 %7, %5
  %26 = add i64 %25, %9
  %27 = getelementptr double, double addrspace(1)* %2, i64 %26
  store double %c_ij.1, double addrspace(1)* %27, align 1
  ret void
}

attributes #0 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 2, !"Dwarf Version", i32 2}
!1 = !{i32 1, !"Debug Info Version", i32 3}
------- HSAIL ------------------------------
module &__llvm_hsail_module:1:0:$full:$large:$near;

prog kernel &mmul2d(
	kernarg_u64 %__arg_p0,
	kernarg_u64 %__arg_p1,
	kernarg_u64 %__arg_p2,
	kernarg_u64 %__arg_p3)
{
	pragma "AMD RTI", "ARGSTART:mmul2d";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1025";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:1";
	pragma "AMD RTI", "ARGEND:mmul2d";
	// BB#0:                                // %top
	mov_f64	$d1, 0D0000000000000000;
	gridsize_u32	$s0, 0;
	workitemabsid_u32	$s1, 1;
	workitemabsid_u32	$s2, 0;
	cvt_u64_u32	$d0, $s2;
	cvt_u64_u32	$d3, $s1;
	cvt_u64_u32	$d4, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%__arg_p2];
	ld_kernarg_align(8)_width(all)_u64	$d6, [%__arg_p1];
	ld_kernarg_align(8)_width(all)_u64	$d5, [%__arg_p3];
	ld_kernarg_align(8)_width(all)_u64	$d7, [%__arg_p0];
	cmp_lt_b1_s64	$c0, $d5, 1;
	cbr_b1	$c0, @BB0_3;
	// BB#1:                                // %L.preheader
	mul_u64	$d1, $d5, $d3;
	shl_u64	$d1, $d1, 3;
	shl_u64	$d8, $d0, 3;
	add_u64	$d8, $d7, $d8;
	add_u64	$d6, $d6, $d1;
	shl_u64	$d7, $d4, 3;
	mov_f64	$d1, 0D0000000000000000;

@BB0_2:
	// %L
	add_u64	$d9, $d8, $d7;
	ld_global_f64	$d8, [$d8];
	ld_global_f64	$d10, [$d6];
	mul_f64	$d8, $d8, $d10;
	add_f64	$d1, $d1, $d8;
	add_u64	$d6, $d6, 8;
	add_u64	$d5, $d5, 18446744073709551615;
	cmp_ne_b1_s64	$c0, $d5, 0;
	mov_b64	$d8, $d9;
	cbr_b1	$c0, @BB0_2;

@BB0_3:
	// %L.7
	mul_u64	$d3, $d3, $d4;
	add_u64	$d0, $d3, $d0;
	shl_u64	$d0, $d0, 3;
	add_u64	$d0, $d2, $d0;
	st_global_f64	$d1, [$d0];
	ret;
};

