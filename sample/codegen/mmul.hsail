module &__llvm_hsail_module:1:0:$full:$large:$near;

prog kernel &mmul(
	kernarg_u64 %__arg_p0,
	kernarg_u64 %__arg_p1,
	kernarg_u64 %__arg_p2,
	kernarg_u64 %__arg_p3)
{
	pragma "AMD RTI", "ARGSTART:mmul";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1025";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:1";
	pragma "AMD RTI", "ARGEND:mmul";
	// BB#0:                                // %top
	gridsize_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%__arg_p3];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%__arg_p2];
	ld_kernarg_align(8)_width(all)_u64	$d5, [%__arg_p1];
	ld_kernarg_align(8)_width(all)_u64	$d3, [%__arg_p0];
	cmp_lt_b1_s64	$c0, $d0, 1;
	cbr_b1	$c0, @BB0_8;
	// BB#1:                                // %L.preheader
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d6, $s0;
	mul_u64	$d4, $d6, $d0;
	cmp_le_b1_s64	$c0, $d2, 0;
	cbr_b1	$c0, @BB0_2;
	// BB#4:                                // %L.preheader.L.preheader.split_crit_edge
	add_u64	$d4, $d4, 18446744073709551615;
	mul_u64	$d6, $d2, $d6;
	shl_u64	$d6, $d6, 3;
	add_u64	$d5, $d5, $d6;
	shl_u64	$d6, $d0, 3;
	mov_b64	$d7, 1;

@BB0_5:
	// %L.4.preheader
	mov_f64	$d8, 0D0000000000000000;
	mov_b64	$d11, $d3;
	mov_b64	$d9, $d5;
	mov_b64	$d10, $d2;

@BB0_6:
	// %L.4
	add_u64	$d12, $d11, $d6;
	ld_global_f64	$d11, [$d11];
	ld_global_f64	$d13, [$d9];
	mul_f64	$d11, $d11, $d13;
	add_f64	$d8, $d8, $d11;
	add_u64	$d9, $d9, 8;
	add_u64	$d10, $d10, 18446744073709551615;
	cmp_ne_b1_s64	$c0, $d10, 0;
	mov_b64	$d11, $d12;
	cbr_b1	$c0, @BB0_6;
	// BB#7:                                // %L.7
	add_u64	$d9, $d4, $d7;
	shl_u64	$d9, $d9, 3;
	add_u64	$d9, $d1, $d9;
	st_global_f64	$d8, [$d9];
	add_u64	$d3, $d3, 8;
	add_u64	$d8, $d7, 1;
	cmp_ne_b1_s64	$c0, $d7, $d0;
	mov_b64	$d7, $d8;
	cbr_b1	$c0, @BB0_5;
	br	@BB0_8;

@BB0_2:
	// %L.7.us.preheader
	shl_u64	$d2, $d4, 3;
	add_u64	$d1, $d1, $d2;

@BB0_3:
	// %L.7.us
	st_global_u64	0, [$d1];
	add_u64	$d1, $d1, 8;
	add_u64	$d0, $d0, 18446744073709551615;
	cmp_ne_b1_s64	$c0, $d0, 0;
	cbr_b1	$c0, @BB0_3;

@BB0_8:
	// %L.10
	ret;
};

